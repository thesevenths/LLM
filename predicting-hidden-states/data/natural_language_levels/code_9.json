{
  "level": "code",
  "user": "Generate Python code",
  "assistant": "import music21\nimport music21.converter\nfrom collections import namedtuple\n\nNoteEvent = namedtuple('NoteEvent', ['instrument', 'offset', 'offset_in_measure', 'pitch', 'velocity', 'duration'])\n\n\nclass Score:\n    def __init__(self, file):\n        self.stream = music21.converter.parseFile(file)\n        self.parts = list(self.stream.getElementsByClass('Part'))\n\n        self.part_names = []\n        for i, part in enumerate(self.parts):\n            name = part.partName\n            if name is None:\n                name = 'Undefined_' + str(i)\n            self.part_names.append(name)\n\n        self.time_signatures = []\n        for ts in self.stream.getTimeSignatures():\n            self.time_signatures.append((ts.numerator, ts.denominator))\n\n    def get_note_events(self, relative_offset=False, offset_in_seconds=False):\n        event_list = []\n        for i, part in enumerate(self.parts):\n            instrument = self.part_names[i]\n            element_map = part.secondsMap\n            for element_dict in element_map:\n                element = element_dict['element']\n                if type(element) is not music21.note.Note:\n                    continue\n\n                measure_number = element.measureNumber\n                if measure_number is None:\n                    offset_in_measure = 0\n                else:\n                    measure = part.measure(measure_number)\n                    offset_in_measure = element.offset - measure.offset\n\n                if offset_in_seconds:\n                    offset = element_dict['offsetSeconds']\n                    duration = element_dict['durationSeconds']\n                else:\n                    offset = element.offset\n                    duration = element.duration.quarterLength\n                event = NoteEvent(instrument=instrument,\n                                  offset=offset,\n                                  offset_in_measure=offset_in_measure,\n                                  pitch=element.pitch.midi,\n                                  velocity=element.volume.realized,\n                                  duration=duration)\n                event_list.append(event)\n        event_list.sort(key=lambda n: n.offset)\n\n        if not relative_offset:\n            return event_list\n\n        new_event_list = []\n        last_offset = 0\n        for event in event_list:\n            this_offset = event.offset\n            event = event._replace(offset = this_offset - last_offset)\n            last_offset = this_offset\n            new_event_list.append(event)\n        return new_event_list\n\n\n#if __name__ == '__main__':\n#    test_file = '/home/hev7rng/Software/music21/music21/corpus/bach/bwv1.6.mxl'\n#    score = Score(test_file)\n#    event_list = score.get_note_events()\n#    pass"
}