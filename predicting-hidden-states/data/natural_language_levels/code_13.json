{
  "level": "code",
  "user": "Generate Python code",
  "assistant": "from unittest import TestCase\nfrom pathlib import Path\nfrom symbolic_music.midi_to_commands import MidiDataset\nimport time\nfrom matplotlib import pyplot as plt\nimport torch\n\nclass TestMidiDataset(TestCase):\n    def test_create_on_off_wait_commands(self):\n        midi_file = Path(r'C:\\Users\\HEV7RNG\\Documents\\data\\Yale corpus\\ElvisDownload-20190813-123713\\Casadesus-Henri\\Viola-Concerto-in-B-Minor\\Allegro\\Viola-Concerto-in-B-Minor_Allegro_Casadesus-Henri_file1.mid')\n        midi_file = Path(r'C:/Users/HEV7RNG/Documents/data/beethoven_quartets/training_set_1/String-Quartet-No.-2-Op.-18-No.-2-Movement-2/String-Quartet-No.-2-Op.-18-No.-2_String-Quartet-No.-2-Op.-18-No.-2-Movement-2_Beethoven-Ludwig-van_file1.mid')\n        midi_dataset = MidiDataset()\n        on_off_wait_tensor = midi_dataset.create_on_off_wait_commands(midi_file)\n\n        tik = time.time()\n        for i in range(10):\n            item_tensor = midi_dataset.create_input_items(on_off_wait_tensor)\n        print(\"item calculation: \" + str((time.time() - tik) * 0.1) + \" seconds\")\n\n        tik = time.time()\n        for i in range(10):\n            item_tensor = midi_dataset.create_input_items(on_off_wait_tensor, shuffle=True)\n            print(\"length ratio:\", (item_tensor.shape[0] / on_off_wait_tensor.shape[0]))\n        print(\"item calculation with shuffle: \" + str((time.time() - tik) * 0.1) + \" seconds\")\n\n        item_tensor = item_tensor[:1000]\n\n        tik = time.time()\n        for i in range(10):\n            midi_dataset.calculate_features(item_tensor)\n        print(\"feature calculation: \" + str((time.time() - tik) * 0.1) + \" seconds\")\n\n    def test_recreate_midifile(self):\n        midi_file = Path( r'C:/Users/HEV7RNG/Documents/SKO Projekt/symbolic_music/symbolic_music/tests/bach.mid')\n        midi_file = Path(r'C:/Users/HEV7RNG/Documents/SKO Projekt/symbolic_music/symbolic_music/tests/liszt_file.midi')\n        midi_file = Path(r'C:/Users/HEV7RNG/Documents/SKO Projekt/symbolic_music/symbolic_music/tests/quartet.mid')\n        midi_dataset = MidiDataset(instrument_pitch_feature=False)\n        on_off_wait_tensor = midi_dataset.create_on_off_wait_commands(midi_file, ignore_velocity=False, ignore_tempo=False, tempo_factor=1.3)\n        on_off_wait_tensor = midi_dataset.transpose(on_off_wait_tensor, -6)\n\n        item_tensor = midi_dataset.create_input_items(on_off_wait_tensor, shuffle=False)\n        features, command_value = midi_dataset.calculate_features(item_tensor)\n\n        instrument, pitches, offset, velocity, position = torch.split(features[:, midi_dataset.command_feature_offset[-1]:],\n                                                                      midi_dataset.additional_feature_sizes.tolist(), dim=1)\n\n        plt.imshow(pitches.t(), aspect='auto', origin='lower')\n        plt.show()\n\n        midi_file_rec = midi_dataset.midifile_from_item_tensor(item_tensor)\n        midi_file_rec.save('quartet_text_transposed.mid')\n        pass"
}